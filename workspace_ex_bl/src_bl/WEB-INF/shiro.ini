# =======================
# Shiro INI configuration
# =======================
# 参考：https://shiro.apache.org/configuration.html#Configuration-INISections

################################################################################
####  main section
####
#### ここでは、securityManager、Realmsなど、
#### SecurityManagerを構築するために必要な
#### オブジェクトとそのプロパティが定義されています。
################################################################################
[main]

##############################
##
##  認証用 DB 接続設定
##
##############################

# アクセスコントロールマスタ（access_control.propertiesで設定したマスタファイルのパス）への接続
ds = biz.grandsight.ex.ui.ac.io.AcSQLiteDataSource

# SQLite
#ds = org.sqlite.SQLiteDataSource
#ds.url = jdbc:sqlite:C:/EX/UI/wildfly-10.1.0.Final/standalone/deployments/UI.war/mst/access_control.db3

# 他DB接続設定（MySQLの例）
#ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
#ds.serverName = localhost
#ds.port = 3306
#ds.user = xxxxx
#ds.password = xxxxxxxxxx
#ds.databaseName = access_control

# データソース文字列
#ds = org.apache.shiro.jndi.JndiObjectFactory
#ds.requiredType = javax.sql.DataSource
#ds.resourceName = java:jboss/datasources/ExampleDS


##############################
##
##  Realm 設定
##
##############################

# ===== 自動ログイン端末認証用Realm設定 ========================================
remoteHostJdbcRealm = biz.grandsight.ex.ui.ac.shiro.realm.jdbc.RemoteHostJdbcRealm
# データソースを指定 -----------------------------
remoteHostJdbcRealm.dataSource = $ds
# 各SQLを指定 ------------------------------------
remoteHostJdbcRealm.authenticationQueryAfterFROMClause = from remotehosts where remotehost = ?
remoteHostJdbcRealm.userRolesQuery = select role_id from remotehost_roles where remotehost = ?
remoteHostJdbcRealm.permissionsLookupEnabled = true
remoteHostJdbcRealm.permissionsQuery = select permission from role_permissions where role_id = ?


# ===== ユーザー・パスワード認証用Realm設定 ====================================
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
# データソースを指定 -----------------------------
jdbcRealm.dataSource = $ds
# 各SQLを指定 ------------------------------------
jdbcRealm.authenticationQuery = select password from users where user_id = ?
jdbcRealm.userRolesQuery = select role_id from user_roles where user_id = ?
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.permissionsQuery = select permission from role_permissions where role_id = ?
# パスワードのハッシュ化--------------------------
# DefaultPasswordService: SHA-256, 500000 hash iteration, use salt
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService
jdbcRealm.credentialsMatcher = $passwordMatcher
# ------------------------------------------------


##############################
##
##  マルチ認証での認証方式の設定
##
##    マルチRealmの際の認証結果集約方法を指定する
##    複数のRealmがあった場合、Authenticatorには認証結果が集約して返却され、Subjectにセットされる
##
##  ・FirstSuccessfulStrategy
##      複数のうち最初に認証できたもののみ採用      ← この方式でないと認証エラーの種類が細かく判別できない？
##  ・AtLeastOneSuccessfulStrategy
##      複数のうち認証できたものすべてを集約して採用
##  ・AllSuccessfulStrategy
##      複数のうちすべてで認証できなくてはならない
##
##############################

# 方式の選択
#authcStrategy = biz.grandsight.ex.ui.ac.shiro.authc.pam.FirstSuccessfulStrategyWithDetailedException
#authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#authcStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
#authcStrategy = org.apache.shiro.authc.pam.AllSuccessfulStrategy

# 方式の設定
#securityManager.authenticator.authenticationStrategy = $authcStrategy

# 認証エラーの詳細を取りたい場合の指定（独自作成のFirstSuccessfulStrategyWithDetailedExceptionを用いている）
authenticator = biz.grandsight.ex.ui.ac.shiro.authc.pam.FirstSuccessfulStrategyWithDetailedExceptionModularRealmAuthenticator
securityManager.authenticator = $authenticator


##############################
##
##  認証順の設定
##
##  ・カンマ区切りで左から順に照合
##  ・[users] または [roles] に１つ以上設定が存在する場合、
##    [main] では $iniRealm として利用できる
##    設定がない場合は $iniRealm を書くと未定義としてエラーとなる
##
##############################
securityManager.realms = $remoteHostJdbcRealm, $jdbcRealm
#securityManager.realms = $remoteHostJdbcRealm, $jdbcRealm, $iniRealm




################################################################################
####  users section
####
#### 「ユーザー」セクションは、少数の静的に定義された
#### ユーザーアカウントのみが必要な場合の簡単な展開用です。
################################################################################
[users]
# 構文
# username = password [, role1, role2 ...]

#gihyo = gihyopass, Admin, User


################################################################################
####  roles section
####
#### 「ロール」セクションは、少数の静的に定義された
#### ロールのみが必要な場合の簡単なデプロイメント用のセクションです。
################################################################################
[roles]
# 構文
# role = permission1, permission2 ...


################################################################################
####  filters section
################################################################################
[filters]
# 例
#authc.loginUrl = /login.jsp


################################################################################
####  urls section
####
#### 「URL」セクションは、Webアプリケーションの
#### URLベースのセキュリティに使用されます。
####
#### 参考：https://shiro.apache.org/web.html#Web-WebINIconfiguration
################################################################################
[urls]
# 例
#/index.jsp = anon
#/login.jsp = anon
#/Logout = anon
#/user/** = authc
